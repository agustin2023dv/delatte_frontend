/**
 * Servicio de API para recuperaci칩n de contrase침a y verificaci칩n de email.
 *
 * 游댏 Refleja el controller: userAuth.controller.ts
 * 
 * Incluye funciones que interact칰an con el backend:
 * - Verificaci칩n de email
 * - Solicitud de recuperaci칩n de contrase침a
 * - Restablecimiento con token
 * - Cambio de contrase침a autenticado
 */

import { axiosInstance } from 'src/lib/axios/axiosInstance';
import {
  IPasswordForgotDTO,
  IPasswordResetWithOldDTO,
} from '@delatte/shared/dtos';

/**
 * Verifica el correo electr칩nico mediante un token.
 *
 * @param token Token recibido por correo
 * @throws Error si el token es inv치lido o expir칩
 */
export const verifyEmail = async (token: string): Promise<void> => {
  await axiosInstance.post(`/users/email-verification?token=${token}`);
};

/**
 * Solicita el restablecimiento de contrase침a mediante email.
 *
 * @param email Correo del usuario
 * @throws Error si el correo no est치 registrado
 */
export const requestPasswordReset = async (email: string): Promise<void> => {
  await axiosInstance.post('/users/password-reset-requests', { email });
};

/**
 * Restablece la contrase침a usando un token recibido por correo.
 *
 * @param data Objeto con token, nueva contrase침a y confirmaci칩n
 * @throws Error si el token es inv치lido o expir칩
 */
export const resetPassword = async (
  data: IPasswordForgotDTO
): Promise<void> => {
  await axiosInstance.post('/users/password-resets', data);
};

/**
 * Cambia la contrase침a actual del usuario autenticado.
 *
 * @param data Objeto con contrase침a actual, nueva contrase침a y confirmaci칩n
 * @throws Error si la contrase침a actual no es v치lida
 */
export const changePassword = async (
  data: IPasswordResetWithOldDTO
): Promise<void> => {
  await axiosInstance.put('/users/password', data);
};
